datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Keep in sync with `StatusEnum` in `starknet/contracts/profile.cairo`
enum StatusEnum {
  NOT_CHALLENGED
  CHALLENGED
  ADJUDICATION_ROUND_COMPLETED
  APPEALED
  APPEAL_OPPORTUNITY_EXPIRED
  SUPER_ADJUDICATION_ROUND_COMPLETED
  SETTLED
}

// Cache of profiles populated from the `profiles` storage var in zorro.cairo
model CachedProfile {
  id Int @id

  // Fields stored on StarkNet:
  //  - cid : felt  # cidv1 for profile pic/video/etc
  //  - ethereum_address : felt
  //  - submitter_address : felt
  //  - submission_timestamp : felt
  //  - is_notarized : felt
  //  - last_recorded_status : felt  # one of StatusEnum
  //  - challenge_timestamp : felt  # nonzero iff there was a challenge
  //  - challenger_address : felt
  //  - challenge_evidence_cid : felt
  //  - owner_evidence_cid : felt
  //  - adjudication_timestamp : felt  # nonzero iff there was an adjudication
  //  - adjudicator_evidence_cid : felt
  //  - did_adjudicator_verify_profile : felt
  //  - appeal_timestamp : felt  # nonzero iff there was an appeal
  //  - appeal_id : felt
  //  - super_adjudication_timestamp : felt  # nonzero iff there was a super adjudication
  //  - did_super_adjudicator_overturn_adjudicator: felt
  cache Json @db.JsonB

  // Derived fields
  cid      String?
  photoCid String?
  videoCid String?

  ethereumAddress      String?    @unique
  submissionTimestamp  DateTime
  notarized            Boolean
  lastRecordedStatus   StatusEnum
  challengeTimestamp   DateTime?
  challengerAddress    String?
  challengeEvidenceCid String?
  ownerEvidenceCid     String?

  adjudicationTimestamp       DateTime?
  adjudicatorEvidenceCid      String?
  didAdjudicatorVerifyProfile Boolean

  appealTimestamp                        DateTime?
  appealId                               String?
  superAdjudicationTimestamp             DateTime?
  didSuperAdjudicatorOverturnAdjudicator Boolean
  // End derived fields

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connections Connection[]

  RegistrationAttempt RegistrationAttempt[]
  @@index([cid])
}

model RegistrationAttempt {
  id Int @id @default(autoincrement())

  ethereumAddress String
  photoCid        String
  videoCid        String

  notaryViewedAt DateTime?

  reviewedAt   DateTime?
  reviewedById Int?
  reviewedBy   User?     @relation(fields: [reviewedById], references: [id])
  approved     Boolean?
  deniedReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId Int?
  profile   CachedProfile? @relation(fields: [profileId], references: [id])

  // Used for optimisticallyApprovedRegs
  @@index([profileId, approved])
  @@index([ethereumAddress])
}

model Connection {
  id Int @id @default(autoincrement())

  profileId         Int
  purposeIdentifier String
  externalAddress   String
  signature         String // signature from profile owner

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cachedProfile CachedProfile @relation(fields: [profileId], references: [id])
  @@unique([profileId, purposeIdentifier])
}

// Track whether we've sent various types of notifications.
model Notification {
  id Int @id @default(autoincrement())

  key Json @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoleEnum {
  NOTARY
}

model User {
  id              Int     @id @default(autoincrement())
  ethereumAddress String  @unique
  email           String?

  roles             RoleEnum[]
  sessionAuthString String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UserSession UserSession[]

  ReviewedRegistrations RegistrationAttempt[]
}

model UserSession {
  id Int @id @default(autoincrement())

  userId Int
  token  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  User User @relation(fields: [userId], references: [id])
}
